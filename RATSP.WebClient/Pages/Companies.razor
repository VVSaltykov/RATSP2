@page "/Companies"
@using RATSP.Common.Interfaces
@using RATSP.Common.Models
@using RATSP.WebClient.Pages.Modals
@using RATSP.WebCommon.Utils
@inject ICompaniesService ICompaniesService
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenDataGrid Data="@companies" AllowFiltering=true ColumnWidth="300px" AllowColumnPicking=@WithColumnPicker RowSelect="@((Company company) => OnRowSelect(company))">
    <HeaderTemplate>
        <RadzenButton Text="Создать компанию" Click="@OpenCreateDialog"  />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(Company.Id)" Title="ID" Width="80px" TextAlign="TextAlign.Center" Frozen="true" />
        <RadzenDataGridColumn Property="@nameof(Company.Name)" Title="Название" />
        <RadzenDataGridColumn Title="Участие в РАТСП" Width="150px">
            <Template Context="data">
                @data.Participation.GetDisplayName()
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Company.INN)" Title="ИНН" />
    </Columns>
</RadzenDataGrid>

@code {
    IEnumerable<Company> companies;

    [Parameter]
    public bool WithColumnPicker { get; set; } = false;
    
    protected override async Task OnInitializedAsync()
    {
        companies = await ICompaniesService.Read();
    }   
    
    private async Task LoadCompanies()
    {
        companies = await ICompaniesService.Read();
        StateHasChanged(); // Ensure UI refreshes with the new data
    }
    
    private async Task OpenCreateDialog()
    {
        try
        {
            var result = await DialogService.OpenAsync<CreateCompany>("Создание компании");
        
            if (result != null)
            {
                Company company = (Company)result;
                await ICompaniesService.Create(company);
                await LoadCompanies();
            }
        }
        catch (Exception ex) {}
    }
    
    private async Task OnRowSelect(Company company)
    {
        var mirrorCompany = company.Clone();
        var result = await DialogService.OpenAsync<CompanyDetails>("Просмотр данных компании",
            new Dictionary<string, object> { { "Company", mirrorCompany } });
        
        if (result != null)
        {
            if (!ObjectExtensions.ArePropertiesEqual(company, mirrorCompany))
            {
                company = mirrorCompany;
                await ICompaniesService.Update(company);
                await LoadCompanies();
                NotificationService.ShowNotification("Внимание!", "Данные компании были обновлены!", NotificationSeverity.Warning);
            }
            else
            {
                StateHasChanged();
            }
        }
    }
}