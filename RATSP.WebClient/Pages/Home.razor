@page "/"
@using System.IO
@using System.IO.Compression
@using System.Net
@using Newtonsoft.Json
@using RATSP.Common.Interfaces
@using RATSP.Common.Models
@using RATSP.WebCommon.Models
@inject ICompaniesService ICompaniesService
@inject IFractionsService IFractionService
@inject IJSRuntime jsRuntime

<RadzenCard Style="width: 100%; margin: 20px auto;">
    <RadzenContent>
        <RadzenUpload Accept=".xls,.xlsx" Change="OnFileChange" />
        
        @if (fileSelected)
        {
            <div style="display: flex; flex-wrap: wrap;">
                <div style="width: 100%; margin-bottom: 8px;">
                    <RadzenDatePicker Placeholder="Выберите дату" @bind-Value="@selectedDate" style="width: 200px;" />
                </div>
                <div style="display: flex; align-items: center; margin-bottom: 8px; margin-right: 24px;">
                    <RadzenCheckBox @bind-Value="@GrossOut" Name="GrossOut" />
                    <RadzenLabel Text="Бордеро исходящих рисков" Component="GrossOut" Style="margin-left: 8px; vertical-align: middle;" />
                </div>
                <div style="display: flex; align-items: center; margin-bottom: 8px; margin-right: 24px;">
                    <RadzenCheckBox @bind-Value="@GrossIn" Name="GrossIn" />
                    <RadzenLabel Text="Бордеро входящих рисков" Component="GrossIn" Style="margin-left: 8px; vertical-align: middle;" />
                </div>
                <div style="display: flex; align-items: center; margin-bottom: 8px; margin-right: 24px;">
                    <RadzenCheckBox @bind-Value="@Debit" Name="Debit" />
                    <RadzenLabel Text="Дебет-нота" Component="Debit" Style="margin-left: 8px; vertical-align: middle;" />
                </div>
                <div style="display: flex; align-items: center; margin-bottom: 8px;">
                    <RadzenCheckBox @bind-Value="@Credit" Name="Credit" />
                    <RadzenLabel Text="Кредит-нота" Component="Credit" Style="margin-left: 8px; vertical-align: middle;" />
                </div>
            </div>
        }
        
    </RadzenContent>

    <RadzenDataGrid @ref="companyGrid" AllowRowSelectOnRowClick="@_allowRowSelectOnRowClick" AllowFiltering="false" AllowPaging="true" PageSize="11"
                    AllowSorting="true" Data="@Companies" TItem="Company" ColumnWidth="120px"
                    SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@_selectedCompanies" class="m-4">
        <Columns>
            <RadzenDataGridColumn TItem="Company" Width="30px" Sortable="false" Filterable="false">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select all items" } })"
                                    Value="@(_selectedCompanies == null || _selectedCompanies?.Any() != true ? false : !Companies.All(i => _selectedCompanies.Contains(i)) ? null : Companies.Any(i => _selectedCompanies.Contains(i)))"
                                    Change="@(args => _selectedCompanies = args == true ? Companies.ToList() : null)"/>
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(_selectedCompanies != null && _selectedCompanies.Contains(data))" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select item" } })"
                                    TValue="bool" Change="@(args => { if (!_allowRowSelectOnRowClick) { companyGrid.SelectRow(data); } })"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Company" Property="Name" Title="Название"/>
            <RadzenDataGridColumn TItem="Company" Property="@nameof(Company.Participation)" Title="Участие в РАТСП" Width="150px"/>
            <RadzenDataGridColumn TItem="Company" Property="@nameof(Company.INN)" Title="ИНН" />
        </Columns>
    </RadzenDataGrid>

    <RadzenButton Text="Сформировать" Click="OnFileUpload" Disabled="@(!fileSelected)" />
    
</RadzenCard>

<script>
    function downloadZip(base64String) {
        const link = document.createElement('a');
        link.href = 'data:application/zip;base64,' + base64String;
        link.download = 'files.zip';
        link.click();
    }
</script>

@code {
    private IBrowserFile selectedFile;
    private bool fileSelected
    {
        get { return selectedFile != null; }
        set {}
    }
    
    private DateOnly selectedDate;
    private bool GrossIn;
    private bool GrossOut;
    private bool Debit;
    private bool Credit;

    private readonly bool _allowRowSelectOnRowClick = true;
    private IList<Company> _selectedCompanies;
    private RadzenDataGrid<Company> companyGrid;
    private IEnumerable<Company> Companies { get; set; } = new List<Company>();
    private List<Fraction> Fractions { get; set; } = new List<Fraction>();
    
    private List<ExcelValues> excelValuesList { get; set; } = new List<ExcelValues>();
    
    protected override async Task OnInitializedAsync()
    {
        Companies = await ICompaniesService.Read();

        var fractionTasks = Companies.Select(company => IFractionService.ReadByCompany(company));
        var fractionResults = await Task.WhenAll(fractionTasks);

        foreach (var fractions in fractionResults)
        {
            Fractions.AddRange(fractions);
        }
    }   
    
    private void OnFileChange(UploadChangeEventArgs args)
    {
        selectedFile = args.Files.FirstOrDefault();
        fileSelected = selectedFile != null;
        StateHasChanged();
    }
    
    private async Task OnFileUpload()
    {
        if (selectedFile != null)
        {
            try
            {
                using var stream = new MemoryStream();
                await selectedFile.OpenReadStream().CopyToAsync(stream);
                stream.Position = 0;

                if (selectedFile.ContentType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                {
                    var base64Workbook = stream.ToArray();
                    
                    var selectedCompaniesNames = _selectedCompanies.Select(company => company.Name).ToList();

                    var createExcelRequest = new CreateExcelDocumentsRequest
                    {
                        // Заполните необходимые поля
                        SelectedCompanies =  selectedCompaniesNames ,
                        SelectedDate = Convert.ToString(selectedDate),
                        GrossIn = GrossIn,
                        GrossOut = GrossOut,
                        Debit = Debit,
                        Credit = Credit,
                        WorkbookBytes = base64Workbook
                    };

                    var jsonMessage = JsonConvert.SerializeObject(createExcelRequest);
                    
                    var content = new StringContent(jsonMessage, System.Text.Encoding.UTF8, "application/json");

                    using (var client = new HttpClient { BaseAddress = new Uri("https://localhost:7173") })
                    {
                        var response = await client.PostAsync("api/kafka/publish", content);
                        if (response.IsSuccessStatusCode)
                        {
                            Console.WriteLine("File uploaded successfully!");
                        }
                        else
                        {
                            Console.WriteLine("Error uploading file.");
                        }
                    }
                }
                else
                {
                    Console.WriteLine("The selected file is not a valid Excel file in .xlsx format");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing file: {ex.Message}");
            }
        }
    }

    
    private static byte[] CreateZipFile(Dictionary<string, byte[]> files)
    {
        using var zipStream = new MemoryStream();
        using (var archive = new ZipArchive(zipStream, ZipArchiveMode.Create, true))
        {
            foreach (var file in files)
            {
                var zipEntry = archive.CreateEntry(file.Key);
                using var entryStream = zipEntry.Open();
                entryStream.Write(file.Value, 0, file.Value.Length);
            }
        }
        return zipStream.ToArray();
    }
}

