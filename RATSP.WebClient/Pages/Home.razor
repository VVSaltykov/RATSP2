@page "/"
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel
@using System.IO
@using RATSP.Common.Interfaces
@using RATSP.Common.Models
@using RATSP.WebCommon.Models
@inject ICompaniesService ICompaniesService

<RadzenCard Style="width: 100%; margin: 20px auto;">
    <RadzenContent>
        <RadzenUpload Accept=".xls,.xlsx" Change="OnFileChange" />
        
        @if (fileSelected)
        {
            <div style="display: flex; flex-wrap: wrap;">
                <div style="width: 100%; margin-bottom: 8px;">
                    <RadzenDatePicker Placeholder="Выберите дату" @bind-Value="@selectedDate" style="width: 200px;" />
                </div>
                <div style="display: flex; align-items: center; margin-bottom: 8px; margin-right: 24px;">
                    <RadzenCheckBox @bind-Value="@GrossIn" Name="GrossIn" />
                    <RadzenLabel Text="Бордеро исходящих рисков" Component="GrossIn" Style="margin-left: 8px; vertical-align: middle;" />
                </div>
                <div style="display: flex; align-items: center; margin-bottom: 8px; margin-right: 24px;">
                    <RadzenCheckBox @bind-Value="@GrossOut" Name="GrossOut" />
                    <RadzenLabel Text="Бордеро входящих рисков" Component="GrossOut" Style="margin-left: 8px; vertical-align: middle;" />
                </div>
                <div style="display: flex; align-items: center; margin-bottom: 8px; margin-right: 24px;">
                    <RadzenCheckBox @bind-Value="@Debit" Name="Debit" />
                    <RadzenLabel Text="Дебет-нота" Component="Debit" Style="margin-left: 8px; vertical-align: middle;" />
                </div>
                <div style="display: flex; align-items: center; margin-bottom: 8px;">
                    <RadzenCheckBox @bind-Value="@Credit" Name="Credit" />
                    <RadzenLabel Text="Кредит-нота" Component="Credit" Style="margin-left: 8px; vertical-align: middle;" />
                </div>
            </div>
        }
        
    </RadzenContent>

    <RadzenDataGrid @ref="companyGrid" AllowRowSelectOnRowClick="@_allowRowSelectOnRowClick" AllowFiltering="false" AllowPaging="true" PageSize="11"
                    AllowSorting="true" Data="@Companies" TItem="Company" ColumnWidth="120px"
                    SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@_selectedCompanies" class="m-4">
        <Columns>
            <RadzenDataGridColumn TItem="Company" Width="30px" Sortable="false" Filterable="false">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select all items" } })"
                                    Value="@(_selectedCompanies == null || _selectedCompanies?.Any() != true ? false : !Companies.All(i => _selectedCompanies.Contains(i)) ? null : Companies.Any(i => _selectedCompanies.Contains(i)))"
                                    Change="@(args => _selectedCompanies = args == true ? Companies.ToList() : null)"/>
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(_selectedCompanies != null && _selectedCompanies.Contains(data))" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select item" } })"
                                    TValue="bool" Change="@(args => { if (!_allowRowSelectOnRowClick) { companyGrid.SelectRow(data); } })"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Company" Property="Name" Title="Название"/>
            <RadzenDataGridColumn TItem="Company" Property="@nameof(Company.Participation)" Title="Участие в РАТСП" Width="150px"/>
            <RadzenDataGridColumn TItem="Company" Property="@nameof(Company.INN)" Title="ИНН" />
        </Columns>
    </RadzenDataGrid>

    <RadzenButton Text="Сформировать" Click="OnFileUpload" Disabled="@(!fileSelected)" />
    
</RadzenCard>

@code {
    private IBrowserFile selectedFile;
    private bool fileSelected
    {
        get { return selectedFile != null; }
        set {}
    }
    
    private DateTime? selectedDate;
    private bool GrossIn;
    private bool GrossOut;
    private bool Debit;
    private bool Credit;

    private readonly bool _allowRowSelectOnRowClick = true;
    private IList<Company> _selectedCompanies;
    private RadzenDataGrid<Company> companyGrid;
    private IEnumerable<Company> Companies { get; set; } = new List<Company>();
    
    private List<ExcelValues> excelValuesList { get; set; } = new List<ExcelValues>();
    
    protected override async Task OnInitializedAsync()
    {
        Companies = await ICompaniesService.Read();
    }   
    
    private void OnFileChange(UploadChangeEventArgs args)
    {
        selectedFile = args.Files.FirstOrDefault();
        fileSelected = selectedFile != null;
        StateHasChanged();
    }

    private async Task OnFileUpload()
    {
        if (selectedFile != null)
        {
            try
            {
                using var stream = new MemoryStream();
                await selectedFile.OpenReadStream().CopyToAsync(stream);
                stream.Position = 0;

                if (selectedFile.ContentType == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                {
                    IWorkbook workbook = new XSSFWorkbook(stream);
                    ISheet sheet = workbook.GetSheetAt(0);
                    
                    for (int i = 2; i <= sheet.LastRowNum; i++)
                    {
                        IRow row = sheet.GetRow(i);

                        if (row != null)
                        {
                            ExcelValues excelValues = new ExcelValues
                            {
                                Number = row.GetCell(0)?.ToString(),
                                Insurer = row.GetCell(1)?.ToString(),
                                Policyholder = row.GetCell(2)?.ToString(),
                                ContractNumber = row.GetCell(3)?.ToString(),
                                StartDate = row.GetCell(4)?.ToString(),
                                EndDate = row.GetCell(5)?.ToString(),
                                Currency = row.GetCell(6)?.ToString(),
                                InsuranceAmount_LiabilityLimit = row.GetCell(7)?.ToString(),
                                AccruedBonus100 = row.GetCell(8)?.ToString(),
                                GrossPremium = row.GetCell(9)?.ToString(),
                                ReinsurerCommission = row.GetCell(10)?.ToString(),
                                ReinsurerCommissionPercent = row.GetCell(11)?.ToString(),
                                AdministratorCommissionPercent = row.GetCell(12)?.ToString(),
                                AdministratorCommission = row.GetCell(13)?.ToString(),
                                NetPremium = row.GetCell(14)?.ToString(),
                                PremiumPercent = row.GetCell(15)?.ToString(),
                                PaymentRate_ReturnRate = row.GetCell(16)?.ToString(),
                                RefundPremium = row.GetCell(17)?.ToString(),
                                AdministratorCommissionRub = row.GetCell(18)?.ToString(),
                                SanctionsRisk = row.GetCell(19)?.ToString(),
                                ReinsurerFraction = row.GetCell(20)?.ToString(),
                                PaymentDate = row.GetCell(21)?.ToString(),
                                PaymentSumm = row.GetCell(22)?.ToString(),
                                PaymentNumber = row.GetCell(23)?.ToString(),
                                Comment = row.GetCell(24)?.ToString(),
                                InsuranceType = row.GetCell(25)?.ToString(),
                                PaymentContract = row.GetCell(26)?.ToString(),
                            };

                            excelValuesList.Add(excelValues);
                        }
                    }
                    Console.WriteLine("Данные заполнены");
                }
                else
                {
                    Console.WriteLine("The selected file is not a valid Excel file in .xlsx format");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing file: {ex.Message}");
            }
        }
    }
}
